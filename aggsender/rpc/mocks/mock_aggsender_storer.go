// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	types "github.com/agglayer/aggkit/aggsender/types"
	mock "github.com/stretchr/testify/mock"
)

// MockAggsenderStorer is an autogenerated mock type for the AggsenderStorer type
type MockAggsenderStorer struct {
	mock.Mock
}

type MockAggsenderStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAggsenderStorer) EXPECT() *MockAggsenderStorer_Expecter {
	return &MockAggsenderStorer_Expecter{mock: &_m.Mock}
}

// GetCertificateByHeight provides a mock function with given fields: height
func (_m *MockAggsenderStorer) GetCertificateByHeight(height uint64) (*types.CertificateInfo, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateByHeight")
	}

	var r0 *types.CertificateInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*types.CertificateInfo, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) *types.CertificateInfo); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CertificateInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAggsenderStorer_GetCertificateByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateByHeight'
type MockAggsenderStorer_GetCertificateByHeight_Call struct {
	*mock.Call
}

// GetCertificateByHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockAggsenderStorer_Expecter) GetCertificateByHeight(height interface{}) *MockAggsenderStorer_GetCertificateByHeight_Call {
	return &MockAggsenderStorer_GetCertificateByHeight_Call{Call: _e.mock.On("GetCertificateByHeight", height)}
}

func (_c *MockAggsenderStorer_GetCertificateByHeight_Call) Run(run func(height uint64)) *MockAggsenderStorer_GetCertificateByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockAggsenderStorer_GetCertificateByHeight_Call) Return(_a0 *types.CertificateInfo, _a1 error) *MockAggsenderStorer_GetCertificateByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAggsenderStorer_GetCertificateByHeight_Call) RunAndReturn(run func(uint64) (*types.CertificateInfo, error)) *MockAggsenderStorer_GetCertificateByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastSentCertificate provides a mock function with no fields
func (_m *MockAggsenderStorer) GetLastSentCertificate() (*types.CertificateInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastSentCertificate")
	}

	var r0 *types.CertificateInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.CertificateInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.CertificateInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CertificateInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAggsenderStorer_GetLastSentCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastSentCertificate'
type MockAggsenderStorer_GetLastSentCertificate_Call struct {
	*mock.Call
}

// GetLastSentCertificate is a helper method to define mock.On call
func (_e *MockAggsenderStorer_Expecter) GetLastSentCertificate() *MockAggsenderStorer_GetLastSentCertificate_Call {
	return &MockAggsenderStorer_GetLastSentCertificate_Call{Call: _e.mock.On("GetLastSentCertificate")}
}

func (_c *MockAggsenderStorer_GetLastSentCertificate_Call) Run(run func()) *MockAggsenderStorer_GetLastSentCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggsenderStorer_GetLastSentCertificate_Call) Return(_a0 *types.CertificateInfo, _a1 error) *MockAggsenderStorer_GetLastSentCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAggsenderStorer_GetLastSentCertificate_Call) RunAndReturn(run func() (*types.CertificateInfo, error)) *MockAggsenderStorer_GetLastSentCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAggsenderStorer creates a new instance of MockAggsenderStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAggsenderStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAggsenderStorer {
	mock := &MockAggsenderStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
