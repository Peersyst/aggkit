// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEpochNotifier is an autogenerated mock type for the EpochNotifier type
type MockEpochNotifier struct {
	mock.Mock
}

type MockEpochNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEpochNotifier) EXPECT() *MockEpochNotifier_Expecter {
	return &MockEpochNotifier_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields: ctx
func (_m *MockEpochNotifier) Start(ctx context.Context) {
	_m.Called(ctx)
}

// MockEpochNotifier_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockEpochNotifier_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEpochNotifier_Expecter) Start(ctx interface{}) *MockEpochNotifier_Start_Call {
	return &MockEpochNotifier_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockEpochNotifier_Start_Call) Run(run func(ctx context.Context)) *MockEpochNotifier_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEpochNotifier_Start_Call) Return() *MockEpochNotifier_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEpochNotifier_Start_Call) RunAndReturn(run func(context.Context)) *MockEpochNotifier_Start_Call {
	_c.Run(run)
	return _c
}

// String provides a mock function with no fields
func (_m *MockEpochNotifier) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEpochNotifier_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockEpochNotifier_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockEpochNotifier_Expecter) String() *MockEpochNotifier_String_Call {
	return &MockEpochNotifier_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockEpochNotifier_String_Call) Run(run func()) *MockEpochNotifier_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEpochNotifier_String_Call) Return(_a0 string) *MockEpochNotifier_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpochNotifier_String_Call) RunAndReturn(run func() string) *MockEpochNotifier_String_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: id
func (_m *MockEpochNotifier) Subscribe(id string) <-chan EpochEvent {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan EpochEvent
	if rf, ok := ret.Get(0).(func(string) <-chan EpochEvent); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan EpochEvent)
		}
	}

	return r0
}

// MockEpochNotifier_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockEpochNotifier_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - id string
func (_e *MockEpochNotifier_Expecter) Subscribe(id interface{}) *MockEpochNotifier_Subscribe_Call {
	return &MockEpochNotifier_Subscribe_Call{Call: _e.mock.On("Subscribe", id)}
}

func (_c *MockEpochNotifier_Subscribe_Call) Run(run func(id string)) *MockEpochNotifier_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEpochNotifier_Subscribe_Call) Return(_a0 <-chan EpochEvent) *MockEpochNotifier_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEpochNotifier_Subscribe_Call) RunAndReturn(run func(string) <-chan EpochEvent) *MockEpochNotifier_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEpochNotifier creates a new instance of MockEpochNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEpochNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEpochNotifier {
	mock := &MockEpochNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
