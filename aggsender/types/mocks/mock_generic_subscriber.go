// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockGenericSubscriber is an autogenerated mock type for the GenericSubscriber type
type MockGenericSubscriber[T any] struct {
	mock.Mock
}

type MockGenericSubscriber_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockGenericSubscriber[T]) EXPECT() *MockGenericSubscriber_Expecter[T] {
	return &MockGenericSubscriber_Expecter[T]{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: data
func (_m *MockGenericSubscriber[T]) Publish(data T) {
	_m.Called(data)
}

// MockGenericSubscriber_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockGenericSubscriber_Publish_Call[T any] struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - data T
func (_e *MockGenericSubscriber_Expecter[T]) Publish(data interface{}) *MockGenericSubscriber_Publish_Call[T] {
	return &MockGenericSubscriber_Publish_Call[T]{Call: _e.mock.On("Publish", data)}
}

func (_c *MockGenericSubscriber_Publish_Call[T]) Run(run func(data T)) *MockGenericSubscriber_Publish_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockGenericSubscriber_Publish_Call[T]) Return() *MockGenericSubscriber_Publish_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockGenericSubscriber_Publish_Call[T]) RunAndReturn(run func(T)) *MockGenericSubscriber_Publish_Call[T] {
	_c.Run(run)
	return _c
}

// Subscribe provides a mock function with given fields: subscriberName
func (_m *MockGenericSubscriber[T]) Subscribe(subscriberName string) <-chan T {
	ret := _m.Called(subscriberName)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan T
	if rf, ok := ret.Get(0).(func(string) <-chan T); ok {
		r0 = rf(subscriberName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan T)
		}
	}

	return r0
}

// MockGenericSubscriber_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockGenericSubscriber_Subscribe_Call[T any] struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - subscriberName string
func (_e *MockGenericSubscriber_Expecter[T]) Subscribe(subscriberName interface{}) *MockGenericSubscriber_Subscribe_Call[T] {
	return &MockGenericSubscriber_Subscribe_Call[T]{Call: _e.mock.On("Subscribe", subscriberName)}
}

func (_c *MockGenericSubscriber_Subscribe_Call[T]) Run(run func(subscriberName string)) *MockGenericSubscriber_Subscribe_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGenericSubscriber_Subscribe_Call[T]) Return(_a0 <-chan T) *MockGenericSubscriber_Subscribe_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGenericSubscriber_Subscribe_Call[T]) RunAndReturn(run func(string) <-chan T) *MockGenericSubscriber_Subscribe_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockGenericSubscriber creates a new instance of MockGenericSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenericSubscriber[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenericSubscriber[T] {
	mock := &MockGenericSubscriber[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
