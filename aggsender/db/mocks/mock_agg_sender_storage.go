// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	agglayer "github.com/agglayer/aggkit/agglayer"
	common "github.com/ethereum/go-ethereum/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/aggsender/types"
)

// MockAggSenderStorage is an autogenerated mock type for the AggSenderStorage type
type MockAggSenderStorage struct {
	mock.Mock
}

type MockAggSenderStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAggSenderStorage) EXPECT() *MockAggSenderStorage_Expecter {
	return &MockAggSenderStorage_Expecter{mock: &_m.Mock}
}

// DeleteCertificate provides a mock function with given fields: ctx, certificateID
func (_m *MockAggSenderStorage) DeleteCertificate(ctx context.Context, certificateID common.Hash) error {
	ret := _m.Called(ctx, certificateID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) error); ok {
		r0 = rf(ctx, certificateID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAggSenderStorage_DeleteCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCertificate'
type MockAggSenderStorage_DeleteCertificate_Call struct {
	*mock.Call
}

// DeleteCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - certificateID common.Hash
func (_e *MockAggSenderStorage_Expecter) DeleteCertificate(ctx interface{}, certificateID interface{}) *MockAggSenderStorage_DeleteCertificate_Call {
	return &MockAggSenderStorage_DeleteCertificate_Call{Call: _e.mock.On("DeleteCertificate", ctx, certificateID)}
}

func (_c *MockAggSenderStorage_DeleteCertificate_Call) Run(run func(ctx context.Context, certificateID common.Hash)) *MockAggSenderStorage_DeleteCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *MockAggSenderStorage_DeleteCertificate_Call) Return(_a0 error) *MockAggSenderStorage_DeleteCertificate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggSenderStorage_DeleteCertificate_Call) RunAndReturn(run func(context.Context, common.Hash) error) *MockAggSenderStorage_DeleteCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificateByHeight provides a mock function with given fields: height
func (_m *MockAggSenderStorage) GetCertificateByHeight(height uint64) (*types.CertificateInfo, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateByHeight")
	}

	var r0 *types.CertificateInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*types.CertificateInfo, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) *types.CertificateInfo); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CertificateInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAggSenderStorage_GetCertificateByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateByHeight'
type MockAggSenderStorage_GetCertificateByHeight_Call struct {
	*mock.Call
}

// GetCertificateByHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockAggSenderStorage_Expecter) GetCertificateByHeight(height interface{}) *MockAggSenderStorage_GetCertificateByHeight_Call {
	return &MockAggSenderStorage_GetCertificateByHeight_Call{Call: _e.mock.On("GetCertificateByHeight", height)}
}

func (_c *MockAggSenderStorage_GetCertificateByHeight_Call) Run(run func(height uint64)) *MockAggSenderStorage_GetCertificateByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockAggSenderStorage_GetCertificateByHeight_Call) Return(_a0 *types.CertificateInfo, _a1 error) *MockAggSenderStorage_GetCertificateByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAggSenderStorage_GetCertificateByHeight_Call) RunAndReturn(run func(uint64) (*types.CertificateInfo, error)) *MockAggSenderStorage_GetCertificateByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificatesByStatus provides a mock function with given fields: status
func (_m *MockAggSenderStorage) GetCertificatesByStatus(status []agglayer.CertificateStatus) ([]*types.CertificateInfo, error) {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificatesByStatus")
	}

	var r0 []*types.CertificateInfo
	var r1 error
	if rf, ok := ret.Get(0).(func([]agglayer.CertificateStatus) ([]*types.CertificateInfo, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func([]agglayer.CertificateStatus) []*types.CertificateInfo); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.CertificateInfo)
		}
	}

	if rf, ok := ret.Get(1).(func([]agglayer.CertificateStatus) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAggSenderStorage_GetCertificatesByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificatesByStatus'
type MockAggSenderStorage_GetCertificatesByStatus_Call struct {
	*mock.Call
}

// GetCertificatesByStatus is a helper method to define mock.On call
//   - status []agglayer.CertificateStatus
func (_e *MockAggSenderStorage_Expecter) GetCertificatesByStatus(status interface{}) *MockAggSenderStorage_GetCertificatesByStatus_Call {
	return &MockAggSenderStorage_GetCertificatesByStatus_Call{Call: _e.mock.On("GetCertificatesByStatus", status)}
}

func (_c *MockAggSenderStorage_GetCertificatesByStatus_Call) Run(run func(status []agglayer.CertificateStatus)) *MockAggSenderStorage_GetCertificatesByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]agglayer.CertificateStatus))
	})
	return _c
}

func (_c *MockAggSenderStorage_GetCertificatesByStatus_Call) Return(_a0 []*types.CertificateInfo, _a1 error) *MockAggSenderStorage_GetCertificatesByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAggSenderStorage_GetCertificatesByStatus_Call) RunAndReturn(run func([]agglayer.CertificateStatus) ([]*types.CertificateInfo, error)) *MockAggSenderStorage_GetCertificatesByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastSentCertificate provides a mock function with no fields
func (_m *MockAggSenderStorage) GetLastSentCertificate() (*types.CertificateInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastSentCertificate")
	}

	var r0 *types.CertificateInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.CertificateInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.CertificateInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CertificateInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAggSenderStorage_GetLastSentCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastSentCertificate'
type MockAggSenderStorage_GetLastSentCertificate_Call struct {
	*mock.Call
}

// GetLastSentCertificate is a helper method to define mock.On call
func (_e *MockAggSenderStorage_Expecter) GetLastSentCertificate() *MockAggSenderStorage_GetLastSentCertificate_Call {
	return &MockAggSenderStorage_GetLastSentCertificate_Call{Call: _e.mock.On("GetLastSentCertificate")}
}

func (_c *MockAggSenderStorage_GetLastSentCertificate_Call) Run(run func()) *MockAggSenderStorage_GetLastSentCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggSenderStorage_GetLastSentCertificate_Call) Return(_a0 *types.CertificateInfo, _a1 error) *MockAggSenderStorage_GetLastSentCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAggSenderStorage_GetLastSentCertificate_Call) RunAndReturn(run func() (*types.CertificateInfo, error)) *MockAggSenderStorage_GetLastSentCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// SaveLastSentCertificate provides a mock function with given fields: ctx, certificate
func (_m *MockAggSenderStorage) SaveLastSentCertificate(ctx context.Context, certificate types.CertificateInfo) error {
	ret := _m.Called(ctx, certificate)

	if len(ret) == 0 {
		panic("no return value specified for SaveLastSentCertificate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CertificateInfo) error); ok {
		r0 = rf(ctx, certificate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAggSenderStorage_SaveLastSentCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLastSentCertificate'
type MockAggSenderStorage_SaveLastSentCertificate_Call struct {
	*mock.Call
}

// SaveLastSentCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - certificate types.CertificateInfo
func (_e *MockAggSenderStorage_Expecter) SaveLastSentCertificate(ctx interface{}, certificate interface{}) *MockAggSenderStorage_SaveLastSentCertificate_Call {
	return &MockAggSenderStorage_SaveLastSentCertificate_Call{Call: _e.mock.On("SaveLastSentCertificate", ctx, certificate)}
}

func (_c *MockAggSenderStorage_SaveLastSentCertificate_Call) Run(run func(ctx context.Context, certificate types.CertificateInfo)) *MockAggSenderStorage_SaveLastSentCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CertificateInfo))
	})
	return _c
}

func (_c *MockAggSenderStorage_SaveLastSentCertificate_Call) Return(_a0 error) *MockAggSenderStorage_SaveLastSentCertificate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggSenderStorage_SaveLastSentCertificate_Call) RunAndReturn(run func(context.Context, types.CertificateInfo) error) *MockAggSenderStorage_SaveLastSentCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCertificate provides a mock function with given fields: ctx, certificate
func (_m *MockAggSenderStorage) UpdateCertificate(ctx context.Context, certificate types.CertificateInfo) error {
	ret := _m.Called(ctx, certificate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCertificate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CertificateInfo) error); ok {
		r0 = rf(ctx, certificate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAggSenderStorage_UpdateCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCertificate'
type MockAggSenderStorage_UpdateCertificate_Call struct {
	*mock.Call
}

// UpdateCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - certificate types.CertificateInfo
func (_e *MockAggSenderStorage_Expecter) UpdateCertificate(ctx interface{}, certificate interface{}) *MockAggSenderStorage_UpdateCertificate_Call {
	return &MockAggSenderStorage_UpdateCertificate_Call{Call: _e.mock.On("UpdateCertificate", ctx, certificate)}
}

func (_c *MockAggSenderStorage_UpdateCertificate_Call) Run(run func(ctx context.Context, certificate types.CertificateInfo)) *MockAggSenderStorage_UpdateCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CertificateInfo))
	})
	return _c
}

func (_c *MockAggSenderStorage_UpdateCertificate_Call) Return(_a0 error) *MockAggSenderStorage_UpdateCertificate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggSenderStorage_UpdateCertificate_Call) RunAndReturn(run func(context.Context, types.CertificateInfo) error) *MockAggSenderStorage_UpdateCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAggSenderStorage creates a new instance of MockAggSenderStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAggSenderStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAggSenderStorage {
	mock := &MockAggSenderStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
