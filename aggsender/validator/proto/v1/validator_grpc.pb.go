// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: aggsender/validator/proto/v1/validator.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AggsenderValidator_ValidateCertificate_FullMethodName = "/aggkit.aggsender.validator.v1.AggsenderValidator/ValidateCertificate"
)

// AggsenderValidatorClient is the client API for AggsenderValidator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for validating new certificates
type AggsenderValidatorClient interface {
	// Method to validate a new certificate
	ValidateCertificate(ctx context.Context, in *ValidateCertificateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type aggsenderValidatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAggsenderValidatorClient(cc grpc.ClientConnInterface) AggsenderValidatorClient {
	return &aggsenderValidatorClient{cc}
}

func (c *aggsenderValidatorClient) ValidateCertificate(ctx context.Context, in *ValidateCertificateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AggsenderValidator_ValidateCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggsenderValidatorServer is the server API for AggsenderValidator service.
// All implementations must embed UnimplementedAggsenderValidatorServer
// for forward compatibility
//
// Service for validating new certificates
type AggsenderValidatorServer interface {
	// Method to validate a new certificate
	ValidateCertificate(context.Context, *ValidateCertificateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAggsenderValidatorServer()
}

// UnimplementedAggsenderValidatorServer must be embedded to have forward compatible implementations.
type UnimplementedAggsenderValidatorServer struct {
}

func (UnimplementedAggsenderValidatorServer) ValidateCertificate(context.Context, *ValidateCertificateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCertificate not implemented")
}
func (UnimplementedAggsenderValidatorServer) mustEmbedUnimplementedAggsenderValidatorServer() {}

// UnsafeAggsenderValidatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggsenderValidatorServer will
// result in compilation errors.
type UnsafeAggsenderValidatorServer interface {
	mustEmbedUnimplementedAggsenderValidatorServer()
}

func RegisterAggsenderValidatorServer(s grpc.ServiceRegistrar, srv AggsenderValidatorServer) {
	s.RegisterService(&AggsenderValidator_ServiceDesc, srv)
}

func _AggsenderValidator_ValidateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggsenderValidatorServer).ValidateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggsenderValidator_ValidateCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggsenderValidatorServer).ValidateCertificate(ctx, req.(*ValidateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggsenderValidator_ServiceDesc is the grpc.ServiceDesc for AggsenderValidator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggsenderValidator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggkit.aggsender.validator.v1.AggsenderValidator",
	HandlerType: (*AggsenderValidatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateCertificate",
			Handler:    _AggsenderValidator_ValidateCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggsender/validator/proto/v1/validator.proto",
}
