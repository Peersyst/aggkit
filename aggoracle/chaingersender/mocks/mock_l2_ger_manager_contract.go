// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	mock "github.com/stretchr/testify/mock"
)

// MockL2GERManagerContract is an autogenerated mock type for the L2GERManagerContract type
type MockL2GERManagerContract struct {
	mock.Mock
}

type MockL2GERManagerContract_Expecter struct {
	mock *mock.Mock
}

func (_m *MockL2GERManagerContract) EXPECT() *MockL2GERManagerContract_Expecter {
	return &MockL2GERManagerContract_Expecter{mock: &_m.Mock}
}

// GlobalExitRootMap provides a mock function with given fields: opts, ger
func (_m *MockL2GERManagerContract) GlobalExitRootMap(opts *bind.CallOpts, ger [32]byte) (*big.Int, error) {
	ret := _m.Called(opts, ger)

	if len(ret) == 0 {
		panic("no return value specified for GlobalExitRootMap")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, [32]byte) (*big.Int, error)); ok {
		return rf(opts, ger)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, [32]byte) *big.Int); ok {
		r0 = rf(opts, ger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, [32]byte) error); ok {
		r1 = rf(opts, ger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockL2GERManagerContract_GlobalExitRootMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalExitRootMap'
type MockL2GERManagerContract_GlobalExitRootMap_Call struct {
	*mock.Call
}

// GlobalExitRootMap is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - ger [32]byte
func (_e *MockL2GERManagerContract_Expecter) GlobalExitRootMap(opts interface{}, ger interface{}) *MockL2GERManagerContract_GlobalExitRootMap_Call {
	return &MockL2GERManagerContract_GlobalExitRootMap_Call{Call: _e.mock.On("GlobalExitRootMap", opts, ger)}
}

func (_c *MockL2GERManagerContract_GlobalExitRootMap_Call) Run(run func(opts *bind.CallOpts, ger [32]byte)) *MockL2GERManagerContract_GlobalExitRootMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].([32]byte))
	})
	return _c
}

func (_c *MockL2GERManagerContract_GlobalExitRootMap_Call) Return(_a0 *big.Int, _a1 error) *MockL2GERManagerContract_GlobalExitRootMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockL2GERManagerContract_GlobalExitRootMap_Call) RunAndReturn(run func(*bind.CallOpts, [32]byte) (*big.Int, error)) *MockL2GERManagerContract_GlobalExitRootMap_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockL2GERManagerContract creates a new instance of MockL2GERManagerContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockL2GERManagerContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockL2GERManagerContract {
	mock := &MockL2GERManagerContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
