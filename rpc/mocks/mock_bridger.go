// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/tree/types"
)

// MockBridger is an autogenerated mock type for the Bridger type
type MockBridger struct {
	mock.Mock
}

type MockBridger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBridger) EXPECT() *MockBridger_Expecter {
	return &MockBridger_Expecter{mock: &_m.Mock}
}

// GetProof provides a mock function with given fields: ctx, depositCount, localExitRoot
func (_m *MockBridger) GetProof(ctx context.Context, depositCount uint32, localExitRoot common.Hash) (types.Proof, error) {
	ret := _m.Called(ctx, depositCount, localExitRoot)

	if len(ret) == 0 {
		panic("no return value specified for GetProof")
	}

	var r0 types.Proof
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Hash) (types.Proof, error)); ok {
		return rf(ctx, depositCount, localExitRoot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Hash) types.Proof); ok {
		r0 = rf(ctx, depositCount, localExitRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Proof)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, common.Hash) error); ok {
		r1 = rf(ctx, depositCount, localExitRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBridger_GetProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProof'
type MockBridger_GetProof_Call struct {
	*mock.Call
}

// GetProof is a helper method to define mock.On call
//   - ctx context.Context
//   - depositCount uint32
//   - localExitRoot common.Hash
func (_e *MockBridger_Expecter) GetProof(ctx interface{}, depositCount interface{}, localExitRoot interface{}) *MockBridger_GetProof_Call {
	return &MockBridger_GetProof_Call{Call: _e.mock.On("GetProof", ctx, depositCount, localExitRoot)}
}

func (_c *MockBridger_GetProof_Call) Run(run func(ctx context.Context, depositCount uint32, localExitRoot common.Hash)) *MockBridger_GetProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(common.Hash))
	})
	return _c
}

func (_c *MockBridger_GetProof_Call) Return(_a0 types.Proof, _a1 error) *MockBridger_GetProof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBridger_GetProof_Call) RunAndReturn(run func(context.Context, uint32, common.Hash) (types.Proof, error)) *MockBridger_GetProof_Call {
	_c.Call.Return(run)
	return _c
}

// GetRootByLER provides a mock function with given fields: ctx, ler
func (_m *MockBridger) GetRootByLER(ctx context.Context, ler common.Hash) (*types.Root, error) {
	ret := _m.Called(ctx, ler)

	if len(ret) == 0 {
		panic("no return value specified for GetRootByLER")
	}

	var r0 *types.Root
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (*types.Root, error)); ok {
		return rf(ctx, ler)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *types.Root); ok {
		r0 = rf(ctx, ler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Root)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, ler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBridger_GetRootByLER_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootByLER'
type MockBridger_GetRootByLER_Call struct {
	*mock.Call
}

// GetRootByLER is a helper method to define mock.On call
//   - ctx context.Context
//   - ler common.Hash
func (_e *MockBridger_Expecter) GetRootByLER(ctx interface{}, ler interface{}) *MockBridger_GetRootByLER_Call {
	return &MockBridger_GetRootByLER_Call{Call: _e.mock.On("GetRootByLER", ctx, ler)}
}

func (_c *MockBridger_GetRootByLER_Call) Run(run func(ctx context.Context, ler common.Hash)) *MockBridger_GetRootByLER_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *MockBridger_GetRootByLER_Call) Return(_a0 *types.Root, _a1 error) *MockBridger_GetRootByLER_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBridger_GetRootByLER_Call) RunAndReturn(run func(context.Context, common.Hash) (*types.Root, error)) *MockBridger_GetRootByLER_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBridger creates a new instance of MockBridger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBridger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBridger {
	mock := &MockBridger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
