// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"
)

// MockClaim is an autogenerated mock type for the Claim type
type MockClaim struct {
	mock.Mock
}

type MockClaim_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClaim) EXPECT() *MockClaim_Expecter {
	return &MockClaim_Expecter{mock: &_m.Mock}
}

// Hash provides a mock function with no fields
func (_m *MockClaim) Hash() common.Hash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// MockClaim_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockClaim_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
func (_e *MockClaim_Expecter) Hash() *MockClaim_Hash_Call {
	return &MockClaim_Hash_Call{Call: _e.mock.On("Hash")}
}

func (_c *MockClaim_Hash_Call) Run(run func()) *MockClaim_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClaim_Hash_Call) Return(_a0 common.Hash) *MockClaim_Hash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClaim_Hash_Call) RunAndReturn(run func() common.Hash) *MockClaim_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalJSON provides a mock function with no fields
func (_m *MockClaim) MarshalJSON() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalJSON")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClaim_MarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalJSON'
type MockClaim_MarshalJSON_Call struct {
	*mock.Call
}

// MarshalJSON is a helper method to define mock.On call
func (_e *MockClaim_Expecter) MarshalJSON() *MockClaim_MarshalJSON_Call {
	return &MockClaim_MarshalJSON_Call{Call: _e.mock.On("MarshalJSON")}
}

func (_c *MockClaim_MarshalJSON_Call) Run(run func()) *MockClaim_MarshalJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClaim_MarshalJSON_Call) Return(_a0 []byte, _a1 error) *MockClaim_MarshalJSON_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClaim_MarshalJSON_Call) RunAndReturn(run func() ([]byte, error)) *MockClaim_MarshalJSON_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *MockClaim) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClaim_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockClaim_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockClaim_Expecter) String() *MockClaim_String_Call {
	return &MockClaim_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockClaim_String_Call) Run(run func()) *MockClaim_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClaim_String_Call) Return(_a0 string) *MockClaim_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClaim_String_Call) RunAndReturn(run func() string) *MockClaim_String_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with no fields
func (_m *MockClaim) Type() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClaim_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockClaim_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockClaim_Expecter) Type() *MockClaim_Type_Call {
	return &MockClaim_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockClaim_Type_Call) Run(run func()) *MockClaim_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClaim_Type_Call) Return(_a0 string) *MockClaim_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClaim_Type_Call) RunAndReturn(run func() string) *MockClaim_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClaim creates a new instance of MockClaim. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClaim(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClaim {
	mock := &MockClaim{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
