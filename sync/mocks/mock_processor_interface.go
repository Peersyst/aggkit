// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockprocessorInterface is an autogenerated mock type for the processorInterface type
type MockprocessorInterface struct {
	mock.Mock
}

type MockprocessorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockprocessorInterface) EXPECT() *MockprocessorInterface_Expecter {
	return &MockprocessorInterface_Expecter{mock: &_m.Mock}
}

// GetLastProcessedBlock provides a mock function with given fields: ctx
func (_m *MockprocessorInterface) GetLastProcessedBlock(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastProcessedBlock")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockprocessorInterface_GetLastProcessedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastProcessedBlock'
type MockprocessorInterface_GetLastProcessedBlock_Call struct {
	*mock.Call
}

// GetLastProcessedBlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockprocessorInterface_Expecter) GetLastProcessedBlock(ctx interface{}) *MockprocessorInterface_GetLastProcessedBlock_Call {
	return &MockprocessorInterface_GetLastProcessedBlock_Call{Call: _e.mock.On("GetLastProcessedBlock", ctx)}
}

func (_c *MockprocessorInterface_GetLastProcessedBlock_Call) Run(run func(ctx context.Context)) *MockprocessorInterface_GetLastProcessedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockprocessorInterface_GetLastProcessedBlock_Call) Return(_a0 uint64, _a1 error) *MockprocessorInterface_GetLastProcessedBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockprocessorInterface_GetLastProcessedBlock_Call) RunAndReturn(run func(context.Context) (uint64, error)) *MockprocessorInterface_GetLastProcessedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessBlock provides a mock function with given fields: ctx, block
func (_m *MockprocessorInterface) ProcessBlock(ctx context.Context, block Block) error {
	ret := _m.Called(ctx, block)

	if len(ret) == 0 {
		panic("no return value specified for ProcessBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Block) error); ok {
		r0 = rf(ctx, block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockprocessorInterface_ProcessBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessBlock'
type MockprocessorInterface_ProcessBlock_Call struct {
	*mock.Call
}

// ProcessBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - block Block
func (_e *MockprocessorInterface_Expecter) ProcessBlock(ctx interface{}, block interface{}) *MockprocessorInterface_ProcessBlock_Call {
	return &MockprocessorInterface_ProcessBlock_Call{Call: _e.mock.On("ProcessBlock", ctx, block)}
}

func (_c *MockprocessorInterface_ProcessBlock_Call) Run(run func(ctx context.Context, block Block)) *MockprocessorInterface_ProcessBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Block))
	})
	return _c
}

func (_c *MockprocessorInterface_ProcessBlock_Call) Return(_a0 error) *MockprocessorInterface_ProcessBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockprocessorInterface_ProcessBlock_Call) RunAndReturn(run func(context.Context, Block) error) *MockprocessorInterface_ProcessBlock_Call {
	_c.Call.Return(run)
	return _c
}

// Reorg provides a mock function with given fields: ctx, firstReorgedBlock
func (_m *MockprocessorInterface) Reorg(ctx context.Context, firstReorgedBlock uint64) error {
	ret := _m.Called(ctx, firstReorgedBlock)

	if len(ret) == 0 {
		panic("no return value specified for Reorg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, firstReorgedBlock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockprocessorInterface_Reorg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reorg'
type MockprocessorInterface_Reorg_Call struct {
	*mock.Call
}

// Reorg is a helper method to define mock.On call
//   - ctx context.Context
//   - firstReorgedBlock uint64
func (_e *MockprocessorInterface_Expecter) Reorg(ctx interface{}, firstReorgedBlock interface{}) *MockprocessorInterface_Reorg_Call {
	return &MockprocessorInterface_Reorg_Call{Call: _e.mock.On("Reorg", ctx, firstReorgedBlock)}
}

func (_c *MockprocessorInterface_Reorg_Call) Run(run func(ctx context.Context, firstReorgedBlock uint64)) *MockprocessorInterface_Reorg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockprocessorInterface_Reorg_Call) Return(_a0 error) *MockprocessorInterface_Reorg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockprocessorInterface_Reorg_Call) RunAndReturn(run func(context.Context, uint64) error) *MockprocessorInterface_Reorg_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockprocessorInterface creates a new instance of MockprocessorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockprocessorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockprocessorInterface {
	mock := &MockprocessorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
