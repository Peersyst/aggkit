// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/ethereum/go-ethereum/core/types"
	mock "github.com/stretchr/testify/mock"
)

// MockevmDownloaderFull is an autogenerated mock type for the evmDownloaderFull type
type MockevmDownloaderFull struct {
	mock.Mock
}

type MockevmDownloaderFull_Expecter struct {
	mock *mock.Mock
}

func (_m *MockevmDownloaderFull) EXPECT() *MockevmDownloaderFull_Expecter {
	return &MockevmDownloaderFull_Expecter{mock: &_m.Mock}
}

// Download provides a mock function with given fields: ctx, fromBlock, downloadedCh
func (_m *MockevmDownloaderFull) Download(ctx context.Context, fromBlock uint64, downloadedCh chan EVMBlock) {
	_m.Called(ctx, fromBlock, downloadedCh)
}

// MockevmDownloaderFull_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockevmDownloaderFull_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - fromBlock uint64
//   - downloadedCh chan EVMBlock
func (_e *MockevmDownloaderFull_Expecter) Download(ctx interface{}, fromBlock interface{}, downloadedCh interface{}) *MockevmDownloaderFull_Download_Call {
	return &MockevmDownloaderFull_Download_Call{Call: _e.mock.On("Download", ctx, fromBlock, downloadedCh)}
}

func (_c *MockevmDownloaderFull_Download_Call) Run(run func(ctx context.Context, fromBlock uint64, downloadedCh chan EVMBlock)) *MockevmDownloaderFull_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(chan EVMBlock))
	})
	return _c
}

func (_c *MockevmDownloaderFull_Download_Call) Return() *MockevmDownloaderFull_Download_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockevmDownloaderFull_Download_Call) RunAndReturn(run func(context.Context, uint64, chan EVMBlock)) *MockevmDownloaderFull_Download_Call {
	_c.Run(run)
	return _c
}

// GetBlockHeader provides a mock function with given fields: ctx, blockNum
func (_m *MockevmDownloaderFull) GetBlockHeader(ctx context.Context, blockNum uint64) (EVMBlockHeader, bool) {
	ret := _m.Called(ctx, blockNum)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeader")
	}

	var r0 EVMBlockHeader
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (EVMBlockHeader, bool)); ok {
		return rf(ctx, blockNum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) EVMBlockHeader); ok {
		r0 = rf(ctx, blockNum)
	} else {
		r0 = ret.Get(0).(EVMBlockHeader)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) bool); ok {
		r1 = rf(ctx, blockNum)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockevmDownloaderFull_GetBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeader'
type MockevmDownloaderFull_GetBlockHeader_Call struct {
	*mock.Call
}

// GetBlockHeader is a helper method to define mock.On call
//   - ctx context.Context
//   - blockNum uint64
func (_e *MockevmDownloaderFull_Expecter) GetBlockHeader(ctx interface{}, blockNum interface{}) *MockevmDownloaderFull_GetBlockHeader_Call {
	return &MockevmDownloaderFull_GetBlockHeader_Call{Call: _e.mock.On("GetBlockHeader", ctx, blockNum)}
}

func (_c *MockevmDownloaderFull_GetBlockHeader_Call) Run(run func(ctx context.Context, blockNum uint64)) *MockevmDownloaderFull_GetBlockHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockevmDownloaderFull_GetBlockHeader_Call) Return(_a0 EVMBlockHeader, _a1 bool) *MockevmDownloaderFull_GetBlockHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockevmDownloaderFull_GetBlockHeader_Call) RunAndReturn(run func(context.Context, uint64) (EVMBlockHeader, bool)) *MockevmDownloaderFull_GetBlockHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsByBlockRange provides a mock function with given fields: ctx, fromBlock, toBlock
func (_m *MockevmDownloaderFull) GetEventsByBlockRange(ctx context.Context, fromBlock uint64, toBlock uint64) []EVMBlock {
	ret := _m.Called(ctx, fromBlock, toBlock)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsByBlockRange")
	}

	var r0 []EVMBlock
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []EVMBlock); ok {
		r0 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]EVMBlock)
		}
	}

	return r0
}

// MockevmDownloaderFull_GetEventsByBlockRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsByBlockRange'
type MockevmDownloaderFull_GetEventsByBlockRange_Call struct {
	*mock.Call
}

// GetEventsByBlockRange is a helper method to define mock.On call
//   - ctx context.Context
//   - fromBlock uint64
//   - toBlock uint64
func (_e *MockevmDownloaderFull_Expecter) GetEventsByBlockRange(ctx interface{}, fromBlock interface{}, toBlock interface{}) *MockevmDownloaderFull_GetEventsByBlockRange_Call {
	return &MockevmDownloaderFull_GetEventsByBlockRange_Call{Call: _e.mock.On("GetEventsByBlockRange", ctx, fromBlock, toBlock)}
}

func (_c *MockevmDownloaderFull_GetEventsByBlockRange_Call) Run(run func(ctx context.Context, fromBlock uint64, toBlock uint64)) *MockevmDownloaderFull_GetEventsByBlockRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *MockevmDownloaderFull_GetEventsByBlockRange_Call) Return(_a0 []EVMBlock) *MockevmDownloaderFull_GetEventsByBlockRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockevmDownloaderFull_GetEventsByBlockRange_Call) RunAndReturn(run func(context.Context, uint64, uint64) []EVMBlock) *MockevmDownloaderFull_GetEventsByBlockRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogs provides a mock function with given fields: ctx, fromBlock, toBlock
func (_m *MockevmDownloaderFull) GetLogs(ctx context.Context, fromBlock uint64, toBlock uint64) []types.Log {
	ret := _m.Called(ctx, fromBlock, toBlock)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 []types.Log
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []types.Log); ok {
		r0 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Log)
		}
	}

	return r0
}

// MockevmDownloaderFull_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type MockevmDownloaderFull_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - fromBlock uint64
//   - toBlock uint64
func (_e *MockevmDownloaderFull_Expecter) GetLogs(ctx interface{}, fromBlock interface{}, toBlock interface{}) *MockevmDownloaderFull_GetLogs_Call {
	return &MockevmDownloaderFull_GetLogs_Call{Call: _e.mock.On("GetLogs", ctx, fromBlock, toBlock)}
}

func (_c *MockevmDownloaderFull_GetLogs_Call) Run(run func(ctx context.Context, fromBlock uint64, toBlock uint64)) *MockevmDownloaderFull_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *MockevmDownloaderFull_GetLogs_Call) Return(_a0 []types.Log) *MockevmDownloaderFull_GetLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockevmDownloaderFull_GetLogs_Call) RunAndReturn(run func(context.Context, uint64, uint64) []types.Log) *MockevmDownloaderFull_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForNewBlocks provides a mock function with given fields: ctx, lastBlockSeen
func (_m *MockevmDownloaderFull) WaitForNewBlocks(ctx context.Context, lastBlockSeen uint64) uint64 {
	ret := _m.Called(ctx, lastBlockSeen)

	if len(ret) == 0 {
		panic("no return value specified for WaitForNewBlocks")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, uint64) uint64); ok {
		r0 = rf(ctx, lastBlockSeen)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockevmDownloaderFull_WaitForNewBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForNewBlocks'
type MockevmDownloaderFull_WaitForNewBlocks_Call struct {
	*mock.Call
}

// WaitForNewBlocks is a helper method to define mock.On call
//   - ctx context.Context
//   - lastBlockSeen uint64
func (_e *MockevmDownloaderFull_Expecter) WaitForNewBlocks(ctx interface{}, lastBlockSeen interface{}) *MockevmDownloaderFull_WaitForNewBlocks_Call {
	return &MockevmDownloaderFull_WaitForNewBlocks_Call{Call: _e.mock.On("WaitForNewBlocks", ctx, lastBlockSeen)}
}

func (_c *MockevmDownloaderFull_WaitForNewBlocks_Call) Run(run func(ctx context.Context, lastBlockSeen uint64)) *MockevmDownloaderFull_WaitForNewBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockevmDownloaderFull_WaitForNewBlocks_Call) Return(newLastBlock uint64) *MockevmDownloaderFull_WaitForNewBlocks_Call {
	_c.Call.Return(newLastBlock)
	return _c
}

func (_c *MockevmDownloaderFull_WaitForNewBlocks_Call) RunAndReturn(run func(context.Context, uint64) uint64) *MockevmDownloaderFull_WaitForNewBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockevmDownloaderFull creates a new instance of MockevmDownloaderFull. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockevmDownloaderFull(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockevmDownloaderFull {
	mock := &MockevmDownloaderFull{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
